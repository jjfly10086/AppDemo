<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
	http://www.springframework.org/schema/context  
	http://www.springframework.org/schema/context/spring-context-3.1.xsd  
	http://www.springframework.org/schema/mvc  
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!--shiro配置 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	<!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"></bean>

	<!-- 缓存管理 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>

	<!-- 使用Shiro自带的JdbcRealm类 指定密码匹配所需要用到的加密对象 指定存储用户、角色、权限许可的数据源及相关查询语句 -->
	<!-- <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm"> 
		<property name="credentialsMatcher" ref="credentialsMatcher"></property> 
		<property name="permissionsLookupEnabled" value="true"></property> <property 
		name="dataSource" ref="dataSource"></property> <property name="authenticationQuery" 
		value="SELECT user_pass FROM t_user WHERE user_name = ?"></property> 用户角色名 
		<property name="userRolesQuery" value="SELECT b.role_name from t_user_role 
		a left join t_role b on a.role_id= b.id left join t_user c on a.user_id = 
		c.id WHERE c.user_name = ?"></property> 用户权限 <property name="permissionsQuery" 
		value="SELECT c.auth_name FROM t_role_auth a left join t_role b on a.role_id 
		= b.id left join t_auth c on a.auth_id = c.id WHERE b.role_name = ?"></property> 
		</bean> -->
	<!--自定义Realm类 -->
	<bean id="authenticationRealm" class="com.demo.shiro.AuthenticationRealm">
		<!--添加密码匹配对象  -->
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
	</bean>

	<!-- Shiro安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="authenticationRealm"></property>
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>

	<!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/login"></property>
		<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
		<!-- <property name="successUrl" value="/" ></property> -->
		<!-- 用户访问未对其授权的资源时，所显示的连接 -->
		<property name="unauthorizedUrl" value="/login"></property>
		<!--过滤链URL匹配规则，从上到下 anon(未登录时可以访问的url)，authc（登录之后才能访问的url）-->
		<property name="filterChainDefinitions">
			<value>
				/login/** = anon
				/index/**= authc
			</value>
		</property>
	</bean>
	<!-- 开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类， 
		并在必要时进行安全逻辑验证 -->
	<!--此处Bean失效，无法控制到角色和权限，因为无controller层的注解扫描配置 ，移到spring-mvc文件中 -->
	<!-- <bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean> -->
</beans>